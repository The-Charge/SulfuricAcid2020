// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot;

import edu.wpi.first.wpilibj.GenericHID;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import frc.robot.commands.*;
import frc.robot.subsystems.*;
import frc.robot.*;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.button.JoystickButton;
import frc.robot.subsystems.Drivetrain;




/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */


public class RobotContainer {

  private final ExampleSubsystem m_ExampleSubsystem = new ExampleSubsystem();
  private final ExampleCommand m_autoCommand = new ExampleCommand(m_ExampleSubsystem);

  public ControlPanel controlPanel = new ControlPanel();
  public ColorSensor colorSensor = new ColorSensor();
  public Intake intake = new Intake();

  public Drivetrain drivetrain = new Drivetrain();
  public Shifters shifters = new Shifters();
  public Indexer indexer = new Indexer();

  public static Joystick leftJoystick;
  public static Joystick rightJoystick;
  public JoystickButton shiftHighBtn;
  public JoystickButton shiftLowBtn;
  public JoystickButton quarterSpeedBtn;
  public JoystickButton halfSpeedBtn;
  public JoystickButton toggleLockStraightBtn;
  public JoystickButton invertDriveBtn;
  public JoystickButton shootBtn;
  public JoystickButton manualElevation;
  public JoystickButton driveXFeetBtn;
  public JoystickButton indexBtn;
  public JoystickButton positionControlBtn;
  public JoystickButton rotationControlBtn;
  public JoystickButton runIntakeBtn;
  public JoystickButton senseColorBtn;


  public Intake m_Intake = new Intake();
  public ColorSensor m_colorSensor = new ColorSensor();
  private final RotationControl m_rotationControl = new RotationControl(controlPanel, m_colorSensor);
  private final PositionsControl m_positionsControl = new PositionsControl(controlPanel, m_colorSensor);

  public static Joystick buttonBox;
  public boolean realButtonBox = true;

    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    public RobotContainer() {
    SmartDashboard.putData("RotationControl", new RotationControl(controlPanel, m_colorSensor));
    SmartDashboard.putData("PositionsControl", new PositionsControl(controlPanel, m_colorSensor));
    
    //SmartDashboard.putNumber("Red", detectedColor.red);
    //SmartDashboard.putNumber("Green", detectedColor.green);
    //SmartDashboard.putNumber("Blue", detectedColor.blue);
    //SmartDashboard.putNumber("Confidence", match.confidence);
    //SmartDashboard.putString("Detected Color", colorString);
	  configureButtonBindings();


    rightJoystick = new Joystick(0);
    leftJoystick = new Joystick(1);

    //just in case the ButtonBox doesn't work
    if (realButtonBox)
    {
      buttonBox = new Joystick(2);
      
      driveXFeetBtn = new JoystickButton(buttonBox, 2);
      driveXFeetBtn.whenPressed(new DriveXFeetMM(0, 0, 10, drivetrain));
  
      manualElevation = new JoystickButton(buttonBox, 6);
      //manualElevation.whileHeld(new ManualTurretElevation(0));
      shootBtn = new JoystickButton(buttonBox, 1);
      //shootBtn.whileHeld(new Shoot(0));
      indexBtn = new JoystickButton(buttonBox, 3);
      indexBtn.whileHeld(new Index(indexer, 0));
      positionControlBtn = new JoystickButton(buttonBox, 4);
      positionControlBtn.whileHeld(new PositionsControl(controlPanel, colorSensor));
      rotationControlBtn = new JoystickButton(buttonBox, 5);
      rotationControlBtn.whileHeld(new RotationControl(controlPanel, colorSensor));
      runIntakeBtn = new JoystickButton(buttonBox, 7);
      runIntakeBtn.whileHeld(new RunIntake(intake, 0));
      senseColorBtn = new JoystickButton(buttonBox, 8);
      senseColorBtn.whileHeld(new SenseColor(colorSensor));


    }
    else
    {
      driveXFeetBtn = new JoystickButton(leftJoystick, 2);
      driveXFeetBtn.whenPressed(new DriveXFeetMM(0, 0, 10, drivetrain));
  
      manualElevation = new JoystickButton(leftJoystick, 6);
      //manualElevation.whileHeld(new ManualTurretElevation(0));
      shootBtn = new JoystickButton(leftJoystick, 1);
      //shootBtn.whileHeld(new Shoot(0));
      indexBtn = new JoystickButton(leftJoystick, 3);
      indexBtn.whileHeld(new Index(indexer, 0));
      positionControlBtn = new JoystickButton(leftJoystick, 4);
      positionControlBtn.whileHeld(new PositionsControl(controlPanel, colorSensor));
      rotationControlBtn = new JoystickButton(leftJoystick, 5);
      rotationControlBtn.whileHeld(new RotationControl(controlPanel, colorSensor));
      runIntakeBtn = new JoystickButton(leftJoystick, 7);
      runIntakeBtn.whileHeld(new RunIntake(intake, 0));
      senseColorBtn = new JoystickButton(leftJoystick, 8);
      senseColorBtn.whileHeld(new SenseColor(colorSensor));
    }
    

    toggleLockStraightBtn = new JoystickButton(leftJoystick, 1);
    toggleLockStraightBtn.whenPressed(new ToggleLockStraight(drivetrain));

    halfSpeedBtn = new JoystickButton(rightJoystick, 5);
    halfSpeedBtn.whileHeld(new HalfSpeed(drivetrain));
    quarterSpeedBtn = new JoystickButton(rightJoystick, 4);
    quarterSpeedBtn.whileHeld(new QuarterSpeed(drivetrain));
    shiftLowBtn = new JoystickButton(rightJoystick, 2);
    shiftLowBtn.whenPressed(new ShiftLow(shifters));
    shiftHighBtn = new JoystickButton(rightJoystick, 1);
    shiftHighBtn.whenPressed(new ShiftHigh(shifters));
    invertDriveBtn = new JoystickButton(buttonBox, 6);
    invertDriveBtn.whenPressed(new InvertDrive(drivetrain));


    // SmartDashboard Buttons
    SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
    SmartDashboard.putData("ShiftHigh", new ShiftHigh(shifters));
    SmartDashboard.putData("ShiftLow", new ShiftLow(shifters));
    //SmartDashboard.putData("Shoot: default", new Shoot(0.4));
    //SmartDashboard.putData("TurretCommand", new TurretCommand());
    SmartDashboard.putData("RunIntake: default", new RunIntake(intake, 0.4));
    SmartDashboard.putData("DriveXFeetMM: default", new DriveXFeetMM(0, 0, 30, drivetrain));
    //SmartDashboard.putData("TurnNDegreesAbsolute: default", new TurnNDegreesAbsolute(180));
    SmartDashboard.putData("InvertDrive", new InvertDrive(drivetrain));
    SmartDashboard.putData("QuarterSpeed", new QuarterSpeed(drivetrain));
    SmartDashboard.putData("RotationControl", new RotationControl(controlPanel, colorSensor));
    SmartDashboard.putData("PositionControl", new PositionsControl(controlPanel, colorSensor));
    SmartDashboard.putData("Index: default", new Index(indexer, 0.4));
    SmartDashboard.putData("HalfSpeed", new HalfSpeed(drivetrain));
    SmartDashboard.putData("ToggleLockStraight", new ToggleLockStraight(drivetrain));
    //SmartDashboard.putData("ManualTurretElevation: default", new ManualTurretElevation(0));
    //SmartDashboard.putData("ManualTurretElevationDegrees: default", new ManualTurretElevationDegrees(0));
    //SmartDashboard.putData("RunTurretVision", new RunTurretVision());
    //SmartDashboard.putData("RunTurretManual", new RunTurretManual());

    SmartDashboard.putNumber("Degrees:", 0);
    SmartDashboard.putNumber("TurnPID P:", 0.05);
    SmartDashboard.putNumber("TurnPID I:", 0.00004);
    SmartDashboard.putNumber("TurnPID D:", 0.0025);

    //SmartDashboard.putData("Reinitialize PIDController:", new ReinitializePIDController());
  }

  /**
   * Use this method to define your button->command mappings.  Buttons can be created by
   * instantiating a {@link GenericHID} or one of its subclasses ({@link
   * edu.wpi.first.wpilibj.Joystick} or {@link XboxController}), and then passing it to a
   * {@link edu.wpi.first.wpilibj2.command.button.JoystickButton}.
   */
  private void configureButtonBindings() {
  }
  /**
   * Use this to pass the autonomous command to the main {@link Robot} class.
   *
   * @return the command to run in autonomous
   */
  public Command getAutonomousCommand() {
    // An ExampleCommand will run in autonomous
    return m_autoCommand;
  }

  public Joystick getRightJoystick() {
    return rightJoystick;
  }

  public Joystick getLeftJoystick() {
    return leftJoystick;
  }

  public Joystick getButtonBox() {
    return buttonBox;
  }







}
