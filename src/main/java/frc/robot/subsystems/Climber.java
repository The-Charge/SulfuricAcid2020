// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.subsystems;

import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.wpilibj.DoubleSolenoid.Value;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.FeedbackDevice;
import com.ctre.phoenix.motorcontrol.NeutralMode;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;



/**
 *
 */
public class Climber extends SubsystemBase {

    
private WPI_TalonSRX climberMotor;
private DoubleSolenoid climberBrakeDoubleSolenoid;
private boolean goingUp;

    final int TIMEOUT_MS = 10;   //needs tuning
    private final static int MAX_TICKS_PER_SEC = 934;
   

    public Climber() {
climberMotor = new WPI_TalonSRX(12);
climberBrakeDoubleSolenoid = new DoubleSolenoid(0, 3, 4);
        
goingUp = false;
//setDefaultCommand(new ClimberBrake(this));

    }

    public void stopMotor(){    //stops the climber motor by setting the speed to 0
        climberMotor.set(ControlMode.PercentOutput,0);
        
    }

    public void engageBrakes(){ //engages the double solenoid that acts as a brake for the climber
        climberBrakeDoubleSolenoid.set(Value.kForward);
    }
    public void disengageBrake()    //disengages the double solenoid brake
    {
        climberBrakeDoubleSolenoid.set(Value.kReverse);
    }

    public void set(double percentSpeed)    //turns double solenoid off. if speed is +, goingup is true, else it is false
    {
        climberBrakeDoubleSolenoid.set(Value.kOff);
        if(percentSpeed > 0)
            goingUp = true;
        else
            goingUp = false;
        climberMotor.set(ControlMode.PercentOutput, percentSpeed);  //sets the speed to the parameter speed
    }
    public void setPercentVBus()    //sets the motor speed to 0
    {
        climberMotor.set(ControlMode.PercentOutput, 0);
    }
    public void setBrakeMode(){ //sets the motor to neutralmode.brake
		climberMotor.setNeutralMode(NeutralMode.Brake);
    }
    public void setCoastMode(){ //sets the motor to coast
		climberMotor.setNeutralMode(NeutralMode.Coast);
    }
	public void initalizeMotor(){   //inverts the motor
	
	climberMotor.setInverted(true);
	}

    public double getCurrent()  //gets the electrical current from the motor
    {
        return climberMotor.getSupplyCurrent();
    }
 
    public void limitCurrent()
    {
        //Don't know the exact max current number
        climberMotor.configPeakCurrentLimit(40); // don't activate current limit until current exceeds 30 A ...
        climberMotor.configPeakCurrentDuration(100); // ... for at least 100 ms
        climberMotor.configContinuousCurrentLimit(35); // once current-limiting is actived, hold at 20A
        climberMotor.enableCurrentLimit(true);
        //Enabling Current Limit means the Talon SRX will automatically monitor the current output
        //  and restrict the output with a limit cap.
    }

}
    

