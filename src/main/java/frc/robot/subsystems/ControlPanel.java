// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.subsystems;

import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.Subsystem;
import edu.wpi.first.wpilibj.util.Color;
import com.ctre.phoenix.motorcontrol.NeutralMode;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

public class ControlPanel implements Subsystem {

private WPI_TalonSRX controlPanelMotor;

   private String currentColor = "Unknown";
  private String temp = "Unknown";
  private int ctr = 0;
  private double confidences;

  
    public ControlPanel() {
    controlPanelMotor = new WPI_TalonSRX(11);
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
  }
  public void run(double pow) {    	
    controlPanelMotor.set(pow);
}
public void stop(){
  controlPanelMotor.set
}

public void rotateX(ColorSensor m_colorSensor) {
  //FIXME: Use better names for smartdashboard keys
  // Would strongly recommend starting with class name. IE: DriveTrain left speed set
  // Prevents key collision and helps speed up debugging
  SmartDashboard.putNumber("Counter", ctr);
  currentColor = m_colorSensor.getColorString();
  confidences = m_colorSensor.getConfidence();
  //System.out.println(confidences);
  
  //while (ctr<16){
    //FIXME: Move the magic numbers (26, 0.5) to a constants. Document.
    if (ctr<26){
      controlPanelMotor.set(0.5);
    }

    //FIXME: Remove these. I should not be seeing STDOUT anywhere in the code
    //System.out.println("TEMP:" + temp + temp + temp + temp + temp);
    //System.out.println("CURRENT:" + currentColor + currentColor + currentColor + currentColor + currentColor);
    //System.out.println("Check:" + ctr);
    //System.out.println("Confidence " + confidences);

    //everytime the color changes counter goes up
    //FIXME: Move the magic number (.935) to a constant. Document it
    if (currentColor!= temp && confidences>.935) {
      ctr++;
      temp = currentColor;
      
      
    }
}
public void rotateColor(Color desiredColor, ColorSensor colorSensor){
  Color currentColor = colorSensor.getColor();
  confidences = colorSensor.getConfidence();
  //FIXME: Move the magic numbers (.8, 0.5) to constants. Document them
  if(!desiredColor.equals(currentColor) && confidences>.8){ 
    controlPanelMotor.set(.5);
  }
  
}
public int getCounter(){
  return ctr;
}
public void setCounter(int counter){
  ctr = counter;
}
public void setBrakeMode(){
  controlPanelMotor.setNeutralMode(NeutralMode.Brake);
  }
  public void setCoastMode(){
  controlPanelMotor.setNeutralMode(NeutralMode.Coast);
  }

  //FIXME: Remove excess comments
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}


