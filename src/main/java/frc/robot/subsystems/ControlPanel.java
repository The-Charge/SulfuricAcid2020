// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.subsystems;

import edu.wpi.first.wpilibj2.command.SubsystemBase;
import frc.robot.subsystems.*;
import frc.robot.RobotContainer;
import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.Subsystem;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.I2C; //not sure if I need this. This is for the port
import edu.wpi.first.wpilibj.PIDSource;
import edu.wpi.first.wpilibj.util.Color;
import edu.wpi.first.wpilibj.*;

import com.ctre.phoenix.motorcontrol.NeutralMode;

import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

public class ControlPanel implements Subsystem {

private WPI_TalonSRX controlPanelMotor;

   private String currentColor = "Unknown";
  private String temp = "Unknown";
  private int ctr = 0;
  private double confidences;

  
    public ControlPanel() {

    controlPanelMotor = new WPI_TalonSRX(11);
    }

 
    

    @Override
    public void periodic() {
        // Put code here to be run every loop
  }
  public void run(double pow) {    	//set the control panel motor to the parameter value
    controlPanelMotor.set(pow);
}
public void stop(){ //sets motor to 0 speed
  controlPanelMotor.set
}

public void rotateX(ColorSensor m_colorSensor) {  //counts the amount of times the color is changed.
  SmartDashboard.putNumber("Counter", ctr);
  currentColor = m_colorSensor.getColorString();
  confidences = m_colorSensor.getConfidence();
  //System.out.println(confidences);
  
  //while (ctr<16){
    if (ctr<26){  //sets the motor to 0.5 speed while the number of colors detected is less than 26
      controlPanelMotor.set(0.5);
    }

    

    //everytime the color changes counter goes up
    if (currentColor!= temp && confidences>.935) {
      ctr++;
      temp = currentColor;
      
      
    }
}
public void rotateColor(Color desiredColor, ColorSensor colorSensor){ //when we need to land on a certain color
  //runs motor until on desired color
  Color currentColor = colorSensor.getColor();
  confidences = colorSensor.getConfidence();
  if(!desiredColor.equals(currentColor) && confidences>.8){ 
    controlPanelMotor.set(.5);
  }
  
}
public int getCounter(){  //returns counter
  return ctr;
}
public void setCounter(int counter){  //sets couter
  ctr = counter;
}
public void setBrakeMode(){ //motor to brake
  controlPanelMotor.setNeutralMode(NeutralMode.Brake);
  }
  public void setCoastMode(){ //motor to coast
  controlPanelMotor.setNeutralMode(NeutralMode.Coast);
  }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}


