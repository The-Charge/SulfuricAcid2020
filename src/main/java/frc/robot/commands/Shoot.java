// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.commands;

import edu.wpi.first.wpilibj2.command.CommandBase;
import edu.wpi.first.wpilibj2.command.WaitCommand;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import frc.robot.Robot;
import frc.robot.RobotContainer;
import frc.robot.subsystems.BallSensor;
import frc.robot.subsystems.Shooter;

/**
 *
 */
public class Shoot extends CommandBase {

    private double m_speed;
    private final Shooter m_shooter;
    private final BallSensor m_ballSensor;

    public Shoot(double speed, Shooter shooter, BallSensor ballSensor) {
        m_shooter = shooter;
        m_speed = speed;
        m_ballSensor = ballSensor;
        addRequirements(m_shooter,m_ballSensor);

    }

    // Called just before this Command runs the first time
    @Override
    public void initialize() {
        m_shooter.initSpeedMode();

    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    public void execute() {
        double xAxisVal = RobotContainer.buttonBox.getRawAxis(0);
        m_shooter.setPercentSpeedPID(xAxisVal);
       // Robot.shooter.run(m_speed);
       // FIXME: Need a better smart dashboard key
       // Would recommend throwing in class name
        SmartDashboard.putNumber("XAxisValShoot", xAxisVal);

        if (m_shooter.getCurrentSpeed() == xAxisVal)
        {
            m_shooter.deactivateStopper();
        }
       

    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    public boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    public void end(boolean interrupted) {
        m_shooter.stop();
        if (!m_ballSensor.ballSensed())
        {
            m_shooter.activateStopper();
        }
        else{
            new CloseStopper(m_shooter,m_ballSensor);
        }
    }

    
}
