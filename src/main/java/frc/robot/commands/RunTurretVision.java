// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package frc.robot.commands;

import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.CommandBase;
import frc.robot.Robot;
import frc.robot.subsystems.Turret;

/**
 *
 */
public class RunTurretVision extends CommandBase {
    private double[] visionResults;
    private double horizontalAngle;
    private final Turret m_turret;
    private double timeSinceTarget;
    private double currentTime;
    private static final double WAIT_TIME = 1500;  // 1.5 seconds
    
    public RunTurretVision(Turret turret, double vertical) {
        m_turret = turret;
        m_turret.setRawVertical(vertical);
        addRequirements(m_turret);

        timeSinceTarget = 0;
    }

    // Called just before this Command runs the first time
    @Override
    public void initialize() {
        m_turret.enableVision();
        m_turret.setTurretStatus("no target");
        visionResults = new double[] {0, 0};
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    public void execute() {
        visionResults = SmartDashboard.getNumberArray("Vision/result", new double[] {0, 0});
        currentTime = System.currentTimeMillis();
        // Result key:
        //  0. timestamp
        //  1. success (0/1)
        //  2. distance
        //  3. horizontal angle
        //  4. vertical angle
        //  5. alignment angle
        //  6. inner port (0/1)
        //  7. instantaneous FPS

        if (visionResults[1] == 0) {
            m_turret.setTurretStatus("no target");
            // If no target has been seen in WAIT_TIME milliseconds, reset to origin
            if (currentTime - timeSinceTarget > WAIT_TIME) {
                m_turret.runHorizontalManual(0);
            }
        } else {
            horizontalAngle = visionResults[3];
            m_turret.gotoHorizontalAngle(horizontalAngle);
            timeSinceTarget = currentTime;
        }
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    public boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    public void end(boolean interrupted) {
        m_turret.disableVision();
    }
}
